{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "description": "API for SocialSync application",
    "title": "SocialSync API"
  },
  "servers": [
    {
      "url": "http://localhost:8000"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  },
  "paths": {
    "/api/users/signup": {
      "post": {
        "tags": ["Users"],
        "summary": "Registration",
        "description": "User registration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "description": "User Details",
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "gender": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User added successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Email exists already. Please login!"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/users/signin": {
      "post": {
        "tags": ["Users"],
        "summary": "Login",
        "description": "Login to get token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "description": "User Credentials",
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/users/get-details/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User Details",
        "description": "Get User Details By Id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/users/get-all-details": {
      "get": {
        "tags": ["Users"],
        "summary": "Get details of all users",
        "description": "Get All Users Details",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/users/update-details/{id}": {
      "put": {
        "tags": ["Users"],
        "summary": "Update",
        "description": "Update user details",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "description": "User Details",
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  },
                  "gender": {
                    "type": "string",
                    "example": "male"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/posts/add": {
      "post": {
        "tags": ["Posts"],
        "summary": "Add a post",
        "description": "Add a new post",
        "security": [
          {
            "JWT": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Post data",
              "schema": {
                "type": "object",
                "properties": {
                  "caption": {
                    "type": "string",
                    "description": "Caption for the post",
                    "example": "A New Post"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "url",
                    "description": "URL of the product image",
                    "example": "http://example.com/image.jpg"
                  },
                  "content": {
                    "type": "string",
                    "description": "Content for the post",
                    "example": "This is a post body"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/posts/all": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get all posts",
        "description": "Fetch all posts",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/posts/{postId}": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get a post by id",
        "description": "Get a post by id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      },
      "put": {
        "tags": ["Posts"],
        "summary": "Update post by id",
        "description": "Update the post by id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product Details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "caption": {
                    "type": "string",
                    "description": "Title of the post",
                    "example": "New Caption"
                  },

                  "imageUrl": {
                    "type": "string",
                    "format": "url",
                    "description": "URL of the post image",
                    "example": "http://example.com/image.jpg"
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of the post",
                    "example": "This is the post comntent"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Not found"
            },
            "500": {
              "description": "Server side error"
            }
          }
        }
      },
      "delete": {
        "tags": ["Posts"],
        "summary": "Delete post by id",
        "description": "Delete the post by id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/posts/": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get all posts of the current user",
        "description": "Get all posts of the loggedin user",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/comments/{postId}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get comments by post id",
        "description": "Get all the comments by post id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      },
      "post": {
        "tags": ["Comments"],
        "summary": "Post a comment by post id",
        "description": "Post a comment by post id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Comment for a post",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment to a post",
                    "example": "I like this post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      },
      "put": {
        "tags": ["Comments"],
        "summary": "Update a comment by comment id",
        "description": "Update a comment by comment id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New comment for a post",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment to a post",
                    "example": "I love this post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Delete the comment by comment id",
        "description": "Delete the comment by comment id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/likes/{id}": {
      "get": {
        "tags": ["Likes"],
        "summary": "Get all likes",
        "description": "Get all likes of a post/comment by post/comment id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post/comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/likes/toggle/{id}": {
      "get": {
        "tags": ["Likes"],
        "summary": "Togle like",
        "description": "Togle like for a post/comment by id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the post/comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/get-friends/{userId}": {
      "get": {
        "tags": ["Friendship"],
        "summary": "Get Friends of a user",
        "description": "Get Friends of a user by user id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/get-pending-requests": {
      "get": {
        "tags": ["Friendship"],
        "summary": "Get pending friends requests of the current user",
        "description": "Get pending friends requests of the loggedin user",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/response-to-request/{friendId}": {
      "get": {
        "tags": ["Friendship"],
        "summary": "Respond to a request by friend(user) id",
        "description": "Respond to a request by friend(user) id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Friend/Requester/User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Accept or reject a request",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["accept", "reject"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/toggle-friendship/{friendId}": {
      "get": {
        "tags": ["Friendship"],
        "summary": "Toggle friendship by id",
        "description": "Unfriend/friend existing friend by his/her user id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Friend/User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/send-request/{userId}": {
      "post": {
        "tags": ["Friendship"],
        "summary": "Send a friend rtequest",
        "description": "Send a friend rtequest by user id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Friend/User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/otp/send": {
      "post": {
        "tags": ["Reset Password"],
        "summary": "Send OTP to the current user via email",
        "description": "Send an OTP to the loggedin user through email",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    },

    "/api/otp/verify": {
      "post": {
        "tags": ["Reset Password"],
        "summary": "Verify the OTP",
        "description": "Verify the OTP sent to the user mail",
        "security": [
          {
            "JWT": []
          }
        ],
        "requestBody": {
          "description": "Need OTP and email to verify the OTP",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "OTP sent to the email",
                    "example": "9U4eE0"
                  },
                  "email": {
                    "type": "string",
                    "description": "User email",
                    "example": "example.email@gmail.com"
                  }
                },
                "required": ["otp", "email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server side error"
          }
        }
      }
    }
  }
}
